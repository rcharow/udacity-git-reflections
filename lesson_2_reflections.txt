What happens with you initialize a git repository? Why do you need to do it?
When you initialize a git repository, git creates a git directory in your repository directory.
You need to do this to track the files in the repo.

How is the staging area different from the staging area and repo? What value does it offer?
The staging area keeps track of files that are going to be committed.
It allows you to choose certain files from the repo to commit.
This means that you don't have to commit all of the files in your repo.

How can you use the staging area to make sure you have one commit per logical change?
You can use git diff to compare the files in your working directory to the files
in the staging area before you commit.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
Branches can help if you want to create a new version of the code or try something experimental.
You can make sure your master branch stays the same while trying out new things.

How do the diagrams help you visualize the branch structure?
Diagrams can help you easily see which commits are unreachable.
It is easy to visually trace back through commit parents with a diagram.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
Merging two branches together puts all of the changes for the 2 branches into one new branch (master).
We represent it in a diagram so that we can see all of the commits and their reachability.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
- The cons of gits merging is that it can't always tell how to merge so you might have to figure it out
- The pros are that it merges automatically when it can, which saves time.  Also, it doesn't make decisions
about merge conflicts that could mess up your application.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
You might want to make changes in a separate branch if you want to try something experimental without affecting the master, 
or if you want to make a different version of something.
You also might want to make a new branch to make changes for a pull request on GitHub.
Then once your changes are accepted and merged into the master branch, you can just delete the branch you made the change on.